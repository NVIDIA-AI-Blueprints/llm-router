# Global settings
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# NOTE: API keys are managed via user-created Kubernetes secrets
# See README.md for instructions on creating the required secrets

# Resource Management (disabled by default - enable for production environments)
# Provides namespace-level resource quotas and container limits
resourceManagement:
  # ResourceQuota - limits total resource consumption in the namespace
  resourceQuota:
    enabled: false  # Enable for production to prevent resource exhaustion
    limits:
      cpu: "20"      # Total CPU limit for all containers
      memory: "64Gi" # Total memory limit for all containers
      gpu: "4"       # Total GPU limit for all containers
    requests:
      cpu: "10"      # Total CPU requests for all containers
      memory: "32Gi" # Total memory requests for all containers
    storage:
      requests: "1Ti"            # Total storage requests
      persistentvolumeclaims: "10" # Max PVC count
    objects:
      pods: "20"       # Max pod count
      services: "10"   # Max service count
      secrets: "20"    # Max secret count
      configmaps: "20" # Max configmap count

  # LimitRange - sets default and maximum limits for containers
  limitRange:
    enabled: false  # Enable for production to enforce resource limits
    container:
      default:        # Default limits if not specified
        cpu: "1"
        memory: "2Gi"
      defaultRequest: # Default requests if not specified
        cpu: "100m"
        memory: "256Mi"
      max:           # Maximum allowed limits
        cpu: "8"
        memory: "16Gi"
      min:           # Minimum required limits
        cpu: "50m"
        memory: "128Mi"
    pod:
      max:           # Maximum pod limits
        cpu: "16"
        memory: "32Gi"
      min:           # Minimum pod limits
        cpu: "100m"
        memory: "256Mi"
    pvc:
      max:
        storage: "500Gi"  # Maximum PVC size
      min:
        storage: "1Gi"    # Minimum PVC size

# Ingress configuration
ingress:
  enabled: false
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    # Rate limiting for security
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains";
  hosts:
    - host: llm-router.local
      paths:
        - path: /app(/|$)(.*)
          pathType: ImplementationSpecific
          service: app
        - path: /router-controller(/|$)(.*)
          pathType: ImplementationSpecific
          service: router-controller
        - path: /router-server(/|$)(.*)
          pathType: ImplementationSpecific
          service: router-server
  tls: []
  #  - secretName: llm-router-tls
  #    hosts:
  #      - llm-router.local

# Router Server configuration
routerServer:
  enabled: true
  image:
    repository: router-server
    tag: latest
    pullPolicy: IfNotPresent
  replicas: 2  # High availability - increased from 1
  # Pod Anti-Affinity for high availability
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                    - router-server
            topologyKey: kubernetes.io/hostname
  # Deployment Strategy Configuration
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0  # Ensure zero downtime
  # Security Context Configuration
  securityContext:
    # Pod-level security context
    pod:
      runAsNonRoot: true
      runAsUser: 65534  # nobody user
      runAsGroup: 65534  # nobody group
      fsGroup: 65534
      seccompProfile:
        type: RuntimeDefault
    # Container-level security context
    container:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: false  # Triton needs write access to temp dirs
      runAsNonRoot: true
      runAsUser: 65534
      capabilities:
        drop:
          - ALL
        add:
          - NET_BIND_SERVICE  # For binding to port 8000-8002
      seccompProfile:
        type: RuntimeDefault
  # Health Check Configuration
  healthChecks:
    readinessProbe:
      httpGet:
        path: /v2/health/ready
        port: 8000
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 3
    livenessProbe:
      httpGet:
        path: /v2/health/live
        port: 8000
      initialDelaySeconds: 60
      periodSeconds: 30
      timeoutSeconds: 10
      successThreshold: 1
      failureThreshold: 3
    startupProbe:
      httpGet:
        path: /v2/health/ready
        port: 8000
      initialDelaySeconds: 10
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 60  # 5 minutes total startup time
  resources:
    limits:
      nvidia.com/gpu: 1
      memory: "8Gi"
      cpu: "4"  # CPU limit for resource management
    requests:
      nvidia.com/gpu: 1
      memory: "8Gi"
      cpu: "2"  # CPU request for resource management
  service:
    type: ClusterIP
    ports:
      - name: http
        port: 8000
        targetPort: 8000
      - name: grpc
        port: 8001
        targetPort: 8001
      - name: metrics
        port: 8002
        targetPort: 8002

  # Model Repository Configuration (AGNOSTIC)
  # Specify the path/URL that Triton Server should use for models
  modelRepository:
    # Path can be:
    # - S3: "s3://my-bucket/models/"
    # - GCS: "gs://my-bucket/models/"
    # - Azure: "as://my-container/models/"
    # - Local filesystem: "/model_repository"
    # - NFS: "/nfs/shared/models"
    # - Multiple: "s3://bucket/,/local/cache/"
    path: "/model_repository"  # Default to local filesystem

    # Cloud storage authentication (disabled by default)
    # These reference Kubernetes secrets for secure credential storage
    cloudAuth:
      # AWS S3 authentication
      aws:
        enabled: false
        # Secret containing AWS credentials
        secretName: "aws-credentials"
        # Keys in the secret
        accessKeySecretKey: "AWS_ACCESS_KEY_ID"
        secretAccessKeySecretKey: "AWS_SECRET_ACCESS_KEY"
        # Optional region and session token
        regionSecretKey: "AWS_DEFAULT_REGION"  # Optional
        sessionTokenSecretKey: "AWS_SESSION_TOKEN"  # Optional

      # Google Cloud Storage authentication
      gcs:
        enabled: false
        # Secret containing GCS service account key
        secretName: "gcs-credentials"
        # Key in secret containing JSON service account key
        serviceAccountKeySecretKey: "GOOGLE_APPLICATION_CREDENTIALS_JSON"

      # Azure Blob Storage authentication
      azure:
        enabled: false
        # Secret containing Azure storage credentials
        secretName: "azure-credentials"
        # Keys in the secret
        accountNameSecretKey: "AZURE_STORAGE_ACCOUNT"
        accountKeySecretKey: "AZURE_STORAGE_KEY"
        # Alternative: connection string
        connectionStringSecretKey: "AZURE_STORAGE_CONNECTION_STRING"  # Optional

  # Volume Configuration (OPTIONAL - only if filesystem mount needed)
  # This is separate from modelRepository.path to provide maximum flexibility
  volumes:
    modelRepository:
      # Enable only if you need to mount a volume for the model repository
      # Set to false for cloud storage (S3, GCS, Azure)
      enabled: true

      # Where to mount the volume inside the container
      mountPath: "/model_repository"

      # Storage backend configuration
      storage:
        # Use PersistentVolumeClaim (recommended for production)
        persistentVolumeClaim:
          enabled: true
          storageClass: ""  # Use default storage class if empty
          accessMode: ReadWriteOnce
          size: "100Gi"
          # Optionally specify an existing PVC name
          existingClaim: ""

        # Use NFS share (for shared storage across nodes)
        nfs:
          enabled: false
          server: ""  # NFS server hostname/IP
          path: ""    # Path on NFS server
          readOnly: false

        # EmptyDir for testing (data will be lost on pod restart)
        emptyDir:
          enabled: false
          sizeLimit: ""

        # HostPath (DEPRECATED - security risk, use only for development)
        hostPath:
          enabled: false
          path: ""

  shm_size: "8G"

# Router Controller configuration
routerController:
  enabled: true
  image:
    repository: router-controller
    tag: latest
    pullPolicy: IfNotPresent
  replicas: 2  # High availability - increased from 1
  # Pod Anti-Affinity for high availability
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                    - router-controller
            topologyKey: kubernetes.io/hostname
  # Deployment Strategy Configuration
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0  # Ensure zero downtime
  # Security Context Configuration
  securityContext:
    # Pod-level security context
    pod:
      runAsNonRoot: true
      runAsUser: 65534  # nobody user
      runAsGroup: 65534  # nobody group
      fsGroup: 65534
      seccompProfile:
        type: RuntimeDefault
    # Container-level security context
    container:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true  # Controller can run with read-only filesystem
      runAsNonRoot: true
      runAsUser: 65534
      capabilities:
        drop:
          - ALL
      seccompProfile:
        type: RuntimeDefault
  # Health Check Configuration
  healthChecks:
    readinessProbe:
      httpGet:
        path: /health
        port: 8084
      initialDelaySeconds: 15
      periodSeconds: 10
      timeoutSeconds: 3
      successThreshold: 1
      failureThreshold: 3
    livenessProbe:
      httpGet:
        path: /health
        port: 8084
      initialDelaySeconds: 30
      periodSeconds: 30
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 3
    startupProbe:
      httpGet:
        path: /health
        port: 8084
      initialDelaySeconds: 5
      periodSeconds: 5
      timeoutSeconds: 3
      successThreshold: 1
      failureThreshold: 30  # 2.5 minutes total startup time
  resources:
    limits:
      memory: "2Gi"  # Increased memory limit
      cpu: "1"       # CPU limit for resource management
    requests:
      memory: "512Mi"
      cpu: "500m"    # CPU request for resource management
  service:
    type: ClusterIP
    port: 8084
    targetPort: 8084
  config:
    mountPath: /app
    logLevel: info

# App configuration (demo client)
# Disabled by default - enable via values override if needed for development/demo
app:
  enabled: false
  image:
    repository: llm-router-client
    tag: app
    pullPolicy: IfNotPresent
  replicas: 2  # High availability when enabled - increased from 1
  # Pod Anti-Affinity for high availability (when enabled)
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                    - app
            topologyKey: kubernetes.io/hostname
  # Deployment Strategy Configuration
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0  # Ensure zero downtime
  # Security Context Configuration
  securityContext:
    # Pod-level security context
    pod:
      runAsNonRoot: true
      runAsUser: 65534  # nobody user
      runAsGroup: 65534  # nobody group
      fsGroup: 65534
      seccompProfile:
        type: RuntimeDefault
    # Container-level security context
    container:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: false  # Flask app needs write access for temp files
      runAsNonRoot: true
      runAsUser: 65534
      capabilities:
        drop:
          - ALL
      seccompProfile:
        type: RuntimeDefault
  # Health Check Configuration
  healthChecks:
    readinessProbe:
      httpGet:
        path: /  # Gradio app serves UI at root, no /health endpoint
        port: 8008
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 3
      successThreshold: 1
      failureThreshold: 3
    livenessProbe:
      httpGet:
        path: /  # Gradio app serves UI at root, no /health endpoint
        port: 8008
      initialDelaySeconds: 30
      periodSeconds: 30
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 3
    startupProbe:
      httpGet:
        path: /  # Gradio app serves UI at root, no /health endpoint
        port: 8008
      initialDelaySeconds: 5
      periodSeconds: 5
      timeoutSeconds: 3
      successThreshold: 1
      failureThreshold: 20  # 1.5 minutes total startup time
  resources:
    limits:
      memory: "1Gi"
      cpu: "500m"  # CPU limit for resource management
    requests:
      memory: "256Mi"
      cpu: "100m"  # CPU request for resource management
  service:
    type: ClusterIP
    port: 8008
    targetPort: 8008
  volumes:
    appDir:
      enabled: false  # Usually not needed for stateless apps
      mountPath: /app
      # Storage configuration - PVC is recommended for production if needed
      storage:
        # Use PersistentVolumeClaim (recommended for production)
        persistentVolumeClaim:
          enabled: false  # App is typically stateless
          storageClass: ""
          accessMode: ReadWriteOnce
          size: "10Gi"
          existingClaim: ""
        # EmptyDir for temporary storage
        emptyDir:
          enabled: true
          sizeLimit: "1Gi"
        # HostPath (DEPRECATED - security risk, use only for development)
        hostPath:
          enabled: false
          path: ""